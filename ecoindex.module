<?php

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\node\NodeInterface;

/**
 * Implements hook_help().
 */
function ecoindex_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.ecoindex':
      $output = '';
      $output .= '<h2>' . t('Image and animation management') . '</h2>';
      $output .= '<p>' . t("Optimize and generate images before importing them into the CMS") . '</p>';
      $output .= '<p>' . t("Use images to convey information") . '</p>';
      $output .= '<p>' . t("Propose a text alternative") . '</p>';
      $output .= '<p>' . t("Limit animations") . '</p>';
      $output .= '<p>' . t("Avoid animated GIFs") . '</p>';
      $output .= '<p>' . t("Avoid carousels (avoid automatic scrolling)") . '</p>';
      $output .= '<p>' . t("Use instant changes rather than animated changes (Javascript)") . '</p>';
      $output .= '<p>' . t("Prefer pagination to infinite scrolling") . '</p>';
      $output .= '<h2>' . t('Video and sound management') . '</h2>';
      $output .= '<p>' . t("Ban video backgrounds") . '</p>';
      $output .= '<p>' . t("Use video or audio content when it conveys information") . '</p>';
      $output .= '<p>' . t("Avoid automatic playback and loading of videos and sounds") . '</p>';
      $output .= '<p>' . t("Adapt videos and sounds to reading contexts (size and definition)") . '</p>';
      $output .= '<p>' . t("Offer a text alternative") . '</p>';
      $output .= '<p>' . t("Offer a 'listen only' mode for videos") . '</p>';
      $output .= '<h2>' . t("Document management") . '</h2>';
      $output .= '<p>' . t("Compress and optimize documents") . '</p>';
      $output .= '<p>' . t("Provide document summaries") . '</p>';
      $output .= '<p>' . t("Provide information on file size and format for downloading") . '</p>';
      $output .= '<h2>' . t("Link management") . '</h2>';
      $output .= '<p>' . t("Check that destination urls are valid") . '</p>';

      return $output;
  }
}

/**
 * Implements hook_page_attachments_alter().
 */
function ecoindex_page_attachments_alter(array &$attachments) {
  if (\Drupal::routeMatch()->getRouteName() !== 'entity.node.preview') {
    return [];
  }

  // Has EcoIndex field type ?
  $node = \Drupal::routeMatch()->getParameter('node_preview');
  $ecoindexField = \Drupal::service('ecoindex.helper')->getEcoIndexFieldName($node->getFields());

  if ($node->preview_view_mode === 'full' && $ecoindexField) {
    // Add ecoindex library.
    $attachments['#attached']['library'][] = 'ecoindex/ecoindex';

    // Add drupalSettings.
    $settings = \Drupal::config('ecoindex.settings');

    // Get current value for EcoIndex field.
    $value = $node->get($ecoindexField)->getValue();

    // Send related information to drupalSettings.
    $attachments['#attached']['drupalSettings']['ecoindex'] = [
      'score' => $value['score'] ?? '',
      'grade' => $value['grade'] ?? '',
      'minimum_score' => $settings->get('minimum_score'),
      'content_type' => $node->bundle(),
      'nid' => $node->id(),
      'ecoindex_field_name' => $ecoindexField,
    ];
  }
}
